//
//  ChatroomViewController.swift
//  words
//
//  Created by Neo Ighodaro on 09/12/2017.
//  Copyright (c) 2017 CreativityKills Co.. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MessageKit
import PusherChatkit
import MessageInputBar

protocol ChatroomDisplayLogic: class {
    func handleTyping(by username: String)
    func displayChatMessages(response: Chatroom.Messages.Fetch.Response)
}

class ChatroomViewController: MessagesViewController, ChatroomDisplayLogic {
    
    // MARK: Properties
    
    var isTyping = false
    var messages: [Message] = []
    var interactor: ChatroomBusinessLogic?
    var router: (NSObjectProtocol & ChatroomDataPassing)?

    
    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = ChatroomInteractor()
        let presenter = ChatroomPresenter()
        let router = ChatroomRouter()
        
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
}

extension ChatroomViewController {
    
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
    
        self.initialiseChatkit()
        self.configureMessageKit()
        
        self.navigationItem.title = router?.dataStore?.contact?.user.name
    }
    
    // MARK: Initialise Chatkit
    
    private func initialiseChatkit() {
        guard let room = router?.dataStore?.contact?.room else { return }
        guard let currentUser = router?.dataStore?.currentUser else { return }
        
        self.interactor?.currentUser = currentUser
        self.interactor?.subscribeToRoom(room: room)
    }

    
    // MARK: Configure MessageKit
    
    private func configureMessageKit() {
        // Assign delegates
        messagesCollectionView.messagesDataSource = self
        messagesCollectionView.messagesLayoutDelegate = self
        messagesCollectionView.messagesDisplayDelegate = self

        // Input bar
        messageInputBar = MessageInputBar()
        messageInputBar.sendButton.tintColor = UIColor(red: 69/255, green: 193/255, blue: 89/255, alpha: 1)
        messageInputBar.delegate = self
        messageInputBar.backgroundView.backgroundColor = .white
        messageInputBar.isTranslucent = false
        messageInputBar.inputTextView.backgroundColor = UIColor(red: 249/255, green: 250/255, blue: 252/255, alpha: 1)
        messageInputBar.inputTextView.layer.borderColor = UIColor(red: 192/255, green: 204/255, blue: 218/255, alpha: 1).cgColor
        messageInputBar.inputTextView.layer.borderWidth = 0
        reloadInputViews()
        
        // Keyboard and send btn
        messageInputBar.sendButton.tintColor = UIColor(red: 69/255, green: 193/255, blue: 89/255, alpha: 1)
        scrollsToBottomOnKeyboardBeginsEditing = true
        maintainPositionOnKeyboardFrameChanged = true
    }
    
    // MARK: Display Messages
    
    func displayChatMessages(response: Chatroom.Messages.Fetch.Response) {
        self.messages = response.messages
        self.messagesCollectionView.reloadData()
        self.messagesCollectionView.scrollToBottom()
    }
    
    // MARK: Handle Typing
    
    func handleTyping(by username: String) {
        defer {
            isTyping = !isTyping
        }
        
        if isTyping {
            messageInputBar.topStackView.arrangedSubviews.first?.removeFromSuperview()
            messageInputBar.topStackViewPadding = .zero
        } else {
            let label = UILabel()
            label.text = "\(username) is typing..."
            label.font = UIFont.boldSystemFont(ofSize: 13)
            messageInputBar.topStackView.addArrangedSubview(label)
            messageInputBar.topStackViewPadding.top = 6
            messageInputBar.topStackViewPadding.left = 12
            messageInputBar.backgroundColor = messageInputBar.backgroundView.backgroundColor
        }
    }
}


// MARK: - MessagesDataSource

extension ChatroomViewController: MessagesDataSource {

    func isFromCurrentSender(message: MessageType) -> Bool {
        return message.sender == currentSender()
    }

    func currentSender() -> Sender {
        return Sender(id: (interactor?.currentUser?.id)!, displayName: (interactor?.currentUser?.name)!)
    }

    func numberOfSections(in messagesCollectionView: MessagesCollectionView) -> Int {
        return self.messages.count
    }
    
    func messageForItem(at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -> MessageType {
        return self.messages[indexPath.section]
    }

    func configureAvatarView(_ avatarView: AvatarView, for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) {
        avatarView.initials = self.initials(fromName: message.sender.displayName)
    }

    func messageTopLabelAttributedText(for message: MessageType, at indexPath: IndexPath) -> NSAttributedString? {

        return NSAttributedString(
            string: message.sender.displayName,
            attributes: [NSAttributedString.Key.font: UIFont.preferredFont(forTextStyle: .caption1)]
        )
    }

    func messageBottomLabelAttributedText(for message: MessageType, at indexPath: IndexPath) -> NSAttributedString? {

        struct ConversationDateFormatter {
            static let formatter: DateFormatter = {
                let formatter = DateFormatter()
                formatter.dateStyle = .medium
                return formatter
            }()
        }

        return NSAttributedString(
            string: ConversationDateFormatter.formatter.string(from: message.sentDate),
            attributes: [NSAttributedString.Key.font: UIFont.preferredFont(forTextStyle: .caption2)]
        )
    }

    // MARK: Helpers
    
    func initials(fromName name: String?) -> String {
        var initials = ""
        
        if let initialsArray = name?.components(separatedBy: " ") {
            if let firstWord = initialsArray.first {
                if let firstLetter = firstWord.first {
                    initials += String(firstLetter).capitalized
                }
            }
            if initialsArray.count > 1, let secondWord = initialsArray.last {
                if let secondLetter = secondWord.first {
                    initials += String(secondLetter).capitalized
                }
            }
        } else {
            initials = "?"
        }

        return initials
    }
}


// MARK: - MessagesLayoutDelegate

extension ChatroomViewController: MessagesLayoutDelegate {
    func messageBottomLabelHeight(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -> CGFloat {
        return 16
    }

    func messageTopLabelHeight(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -> CGFloat {
        return 16
    }

    func avatarPosition(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -> AvatarPosition {
        return AvatarPosition(horizontal: .natural, vertical: .messageBottom)
    }

    func messagePadding(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -> UIEdgeInsets {
        return isFromCurrentSender(message: message)
            ? UIEdgeInsets(top: 0, left: 30, bottom: 0, right: 4)
            : UIEdgeInsets(top: 0, left: 4, bottom: 0, right: 30)
    }

    func footerViewSize(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -> CGSize {
        return CGSize(width: messagesCollectionView.bounds.width, height: 10)
    }

    func heightForLocation(message: MessageType, at indexPath: IndexPath, with maxWidth: CGFloat, in messagesCollectionView: MessagesCollectionView) -> CGFloat {
        return 200
    }
}


// MARK: - MessagesDisplayDelegate

extension ChatroomViewController: MessagesDisplayDelegate {

    // MARK: - Text Messages

    func textColor(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -> UIColor {
        return isFromCurrentSender(message: message) ? .white : .darkText
    }

    // MARK: - All Messages

    func backgroundColor(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -> UIColor {
        return isFromCurrentSender(message: message)
            ? UIColor(red: 69/255, green: 193/255, blue: 89/255, alpha: 1)
            : UIColor(red: 230/255, green: 230/255, blue: 230/255, alpha: 1)
    }

    func messageStyle(for message: MessageType, at indexPath: IndexPath, in messagesCollectionView: MessagesCollectionView) -> MessageStyle {
        let corner: MessageStyle.TailCorner = isFromCurrentSender(message: message) ? .bottomRight : .bottomLeft
        return .bubbleTail(corner, .curved)
    }

}


// MARK: - MessageInputBarDelegate

extension ChatroomViewController: MessageInputBarDelegate {
    
    func messageInputBar(_ inputBar: MessageInputBar, didPressSendButtonWith text: String) {
        guard interactor?.currentUser != nil else { return }
        guard let room = router?.dataStore?.contact?.room else { return }
        
        let request = Chatroom.Messages.Create.Request(text: text, sender: currentSender(), room: room)

        self.interactor?.addChatMessage(request: request) { id, error in
            guard error == nil else { return }
            inputBar.inputTextView.text = String()
        }
    }
    
    func messageInputBar(_ inputBar: MessageInputBar, textViewTextDidChangeTo text: String) {
        guard interactor?.currentUser != nil else { return }
        guard let room = router?.dataStore?.contact?.room else { return }
        self.interactor?.startedTyping(inRoom: room)
    }
}
