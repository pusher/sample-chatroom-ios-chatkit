//
//  ListContactsModels.swift
//  words
//
//  Created by Neo Ighodaro on 09/12/2017.
//  Copyright (c) 2017 CreativityKills Co.. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import PusherChatkit

enum ListContacts {
    
    enum Create {
        
        struct Request {
            var user_id: String
        }
        
        struct Response {
            var contact: Contact
            
            init(for user: PCCurrentUser, data: [String:Any]) {
                self.contact = ParseContact(using: user.rooms, data: data).contact
            }
        }
        
        struct ViewModel {
            var contact: Fetch.ViewModel.DisplayedContact
        }
    }
    
    enum Fetch {

        struct Request {
        }
    
        struct Response {
            var contacts: [Contact] = []
            
            init(for user: PCCurrentUser, data: [[String: Any]?]) {
                let rooms: [PCRoom] = user.rooms
                
                for datum in data {
                    let parser = ParseContact(using: rooms, data: datum!)
                    self.contacts.append(parser.contact)
                }
            }
        }
    
        struct ViewModel {
            var displayedContacts: [DisplayedContact]

            struct DisplayedContact: Equatable {
                static func ==(lhs: DisplayedContact, rhs: DisplayedContact) -> Bool {
                    return lhs.id == rhs.id
                }
                
                var id: String
                var name: String
                var isOnline: Bool
            }
        }
    }
    
    struct ParseContact {
        var contact: Contact
        
        init(using rooms: [PCRoom]?, data: [String: Any]) {
            let roomObject = data["room"] as! [String: Any]
            let roomId = roomObject["id"] as! String
            let room = rooms!.first(where: { $0.id == roomId })
            
            let user = User(
                id: data["id"] as! Int,
                name: data["name"] as! String,
                email: data["email"] as! String,
                chatkit_id: data["chatkit_id"] as! String
            )
            
            self.contact = Contact(user: user, room: room!)
        }
    }
}
